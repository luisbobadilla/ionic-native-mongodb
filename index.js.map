{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/mongodb/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This is a template for new plugin wrappers\n *\n * TODO:\n * - Add/Change information below\n * - Document usage (importing, executing main functionality)\n * - Remove any imports that you are not using\n * - Remove all the comments included in this template, EXCEPT the @Plugin wrapper docs and any other docs you added\n * - Remove this note\n *\n */\nimport { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface MongodbSchema {\n  $jsonSchema?: {\n    bsonType?: string | string [];\n    required?: string [];\n    properties?: {\n      [key: string]: {\n        bsonType?: string | string [];\n        title?: string;\n        description?: string;\n        minimum?: number;\n        maximum?: number;\n        exclusiveMaximum?: boolean;\n        exclusiveMinimum?: boolean;\n        enum?: any [];\n        type?: string | string [];\n        allOf?: any;\n        anyOf?: any;\n        multipleOf?: number;\n        maxLength?: number;\n        minLength?: number;\n        pattern?: string;\n        maxProperties?: number;\n        minProperties?: number;\n        required?: boolean;\n        maxItems?: number;\n        minItems?: number;\n        uniqueItems?: boolean;\n      };\n    }\n  };\n}\n\nexport interface IndexKeys {\n  [index: string]: number;\n}\n\nexport interface IndexOptions {\n  name: string;\n  expireAfter: number;\n  unique: boolean;\n  max: number;\n  min: number;\n}\n\nexport interface PipelineStage {\n  [index: string]: any;\n}\n\nexport interface MongodbQuery {\n  [index: string]: any;\n}\n\nexport interface MongodbDocument {\n  [index: string]: any;\n}\n\nexport interface DeleteResult {\n  deletedCount: number;\n  query: MongodbQuery;\n}\n\nexport interface UpdateResult {\n  matchedCount: number;\n  modifiedCount: number;\n  upsertedId: {\n    $oid: string;\n  };\n  query: MongodbQuery;\n}\n\n/**\n * @name Mongodb\n * @description\n * This plugin does something\n *\n * @usage\n * ```typescript\n * import { Mongodb } from '@ionic-native/mongodb';\n *\n *\n * constructor(private mongodb: Mongodb) { }\n *\n * ...\n *\n *\n * this.mongodb.initiate('gudsi-app')\n *   .then((res: any) => console.log(res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'Mongodb',\n  plugin: 'gudsi-mongodb-plugin', // npm package name, example: cordova-plugin-camera\n  pluginRef: 'cordova.plugins.mongodb', // the variable reference to call the plugin, example: navigator.geolocation\n  repo: 'https://github.com/luisbobadilla/gudsi-mongodb-plugin.git', // the github repository URL for the plugin\n  platforms: ['Android'] // Array of platforms supported, example: ['Android', 'iOS']\n})\n@Injectable()\nexport class Mongodb extends IonicNativePlugin {\n\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  initiate(appId: string): Promise<boolean> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  dropDatabase(databaseName: string): Promise<boolean> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  createCollection(\n    databaseName: string,\n    collectionName: string,\n    schema?: MongodbSchema\n  ): Promise<boolean> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  dropCollection(\n    databaseName: string,\n    collectionName: string\n  ): Promise<boolean> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  listCollectionNames(databaseName: string): Promise<string[]> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  createIndex(\n    databaseName: string,\n    collectionName: string,\n    keys: IndexKeys,\n    options: IndexOptions,\n  ): Promise<boolean> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  dropIndex(\n    databaseName: string,\n    collectionName: string,\n    indexName: string,\n  ): Promise<boolean> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  aggregate(\n    databaseName: string,\n    collectionName: string,\n    pipeline: PipelineStage []\n  ): Promise<MongodbDocument[]> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  count(\n    databaseName: string,\n    collectionName: string,\n    query?: MongodbQuery\n  ): Promise<number> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  find(\n    databaseName: string,\n    collectionName: string,\n    query?: MongodbQuery\n  ): Promise<MongodbDocument[]> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  findOne(\n    databaseName: string,\n    collectionName: string,\n    query?: MongodbQuery\n  ): Promise<MongodbDocument> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  findById(\n    databaseName: string,\n    collectionName: string,\n    id?: string | number\n  ): Promise<MongodbDocument> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  findOneAndUpdate(\n    databaseName: string,\n    collectionName: string,\n    query: MongodbQuery,\n    update: MongodbDocument\n  ): Promise<MongodbDocument> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  findOneAndReplace(\n    databaseName: string,\n    collectionName: string,\n    query: MongodbQuery,\n    replacement: MongodbDocument\n  ): Promise<MongodbDocument> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  findOneAndDelete(\n    databaseName: string,\n    collectionName: string,\n    query: MongodbQuery\n  ): Promise<MongodbDocument> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  insertOne(\n    databaseName: string,\n    collectionName: string,\n    document: MongodbDocument\n  ): Promise<MongodbDocument> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  insertMany(\n    databaseName: string,\n    collectionName: string,\n    documents: MongodbDocument []\n  ): Promise<MongodbDocument []> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  replaceOne(\n    databaseName: string,\n    collectionName: string,\n    query: MongodbQuery,\n    replacemnet: MongodbDocument\n  ): Promise<UpdateResult> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  updateOne(\n    databaseName: string,\n    collectionName: string,\n    query: MongodbQuery,\n    update: MongodbDocument\n  ): Promise<UpdateResult> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  updateMany(\n    databaseName: string,\n    collectionName: string,\n    query: MongodbQuery,\n    update: MongodbDocument\n  ): Promise<UpdateResult> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  deleteOne(\n    databaseName: string,\n    collectionName: string,\n    query: MongodbQuery\n  ): Promise<DeleteResult> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n  /**\n   * This function does something\n   * @param arg1 {string} Some param to configure something\n   * @param arg2 {number} Another param to configure something\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  deleteMany(\n    databaseName: string,\n    collectionName: string,\n    query: MongodbQuery\n  ): Promise<DeleteResult> {\n    return; // We add return; here to avoid any IDE / Compiler errors\n  }\n}\n"]}